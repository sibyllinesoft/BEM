name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  # Stage 1: Code Quality and Security
  quality-gates:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort mypy bandit safety pytest-cov
    
    - name: Code formatting check
      run: |
        black --check --diff src/ tests/ scripts/
        isort --check-only --diff src/ tests/ scripts/
    
    - name: Type checking
      run: |
        mypy src/ --ignore-missing-imports --strict
    
    - name: Security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Stage 2: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 30
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-timeout
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=85 \
          --maxfail=5 \
          --timeout=300 \
          -n auto \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.python-version }}

  # Stage 3: Integration Tests (CPU only)
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-timeout
    
    - name: Prepare test environment
      run: |
        # Download minimal test models
        python scripts/setup/download_models.py --model base --test-mode
        
        # Create test data
        python scripts/setup/prepare_test_data.py
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ \
          --timeout=1800 \
          -v \
          --tb=short
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: integration-test-artifacts
        path: |
          tests/outputs/
          logs/

  # Stage 4: Documentation Build
  docs-build:
    runs-on: ubuntu-latest
    needs: quality-gates
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-gen-files
    
    - name: Build documentation
      run: |
        # Generate API documentation
        python scripts/docs/generate_api_docs.py
        
        # Build documentation site
        mkdocs build --strict
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: site/

  # Stage 5: Build and Package
  build-package:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload package artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # Stage 6: Release (only on main branch)
  release:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, docs-build, build-package]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
    
    - name: Get version
      id: version
      run: |
        VERSION=$(python setup.py --version)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Check if version exists
      id: check_version
      run: |
        if git tag --list | grep -q "^v${{ steps.version.outputs.version }}$"; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Create Release
      if: steps.check_version.outputs.exists == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release v${{ steps.version.outputs.version }}
        body: |
          ## BEM Release v${{ steps.version.outputs.version }}
          
          **Automated release from CI/CD pipeline**
          
          ### Changes
          - See [CHANGELOG.md](CHANGELOG.md) for detailed changes
          
          ### Downloads
          - Python package available on [PyPI](https://pypi.org/project/bem/)
          - Source code available as release assets
          
          ### System Requirements
          - Python 3.9+
          - CUDA-capable GPU (recommended)
          - 32GB+ RAM
          
          ### Quick Start
          ```bash
          pip install bem
          python -c "from bem import SimpleBEM; model = SimpleBEM()"
          ```
        files: |
          dist/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}